package main

import (
	"fmt"
	"reflect"
)

type testSt struct {
	Name string `json:"name_of_employee", "custom":"xyz"`
	Age  int    `json:"age_of_employee"`
}

func main() {
	t := testSt{
		Name: "Abcd",
		Age:  20,
	}
	printUsingStruct(t)
	printUsingStruct2(t)
	printUsingInterface(t)
}

func printUsingStruct(t testSt) {
	s := reflect.ValueOf(&t).Elem()
	typeOfT := s.Type()
	for i := 0; i < s.NumField(); i++ {
		f := s.Field(i)
		fmt.Printf("%d: %s (%s) = %v, tag => %s\n", i, typeOfT.Field(i).Name, f.Type(), f.Interface(), typeOfT.Field(i).Tag)
	}
	fmt.Println("=========================================")
}

func printUsingStruct2(t testSt) {
	e := reflect.ValueOf(&t).Elem()

	for i := 0; i < e.NumField(); i++ {
		varName := e.Type().Field(i).Name
		varType := e.Type().Field(i).Type
		varValue := e.Field(i).Interface()
		varTag := e.Type().Field(i).Tag
		fmt.Printf("%v %v %v %v\n", varName, varType, varValue, varTag)
	}
	fmt.Println("=========================================")
}

func printUsingInterface(v interface{}) {
	rv := reflect.ValueOf(v)
	rt := reflect.TypeOf(v)
	for i := 0; i < rv.NumField(); i++ {
		varName := rt.Field(i).Name
		varType := rv.Field(i).Type()
		varValue := rv.Field(i).Interface()
		varTag := rt.Field(i).Tag
		fmt.Printf("%d: %s (%s) = %v, tag => %s\n", i, varName, varType, varValue, varTag)
	}
	fmt.Println("=========================================")
}
